#!/usr/bin/with-contenv bashio
# ==============================================================================
# Home Assistant Community Add-on: WireGuard
# Runs WireGuard
# ==============================================================================
declare interface
declare api
declare hostname
declare address 
declare token

s6-svc -O /var/run/s6/services/wireguard

bashio::log.info "Starting WireGuard..."

# This is alpha software. We need to set this to instruct
# WireGuard we are OK to go.
export WG_I_PREFER_BUGGY_USERSPACE_TO_POLISHED_KMOD=1

# Get the interface
interface="wg0"
if bashio::config.has_value "server.interface"; then
    interface=$(bashio::config "server.interface")
fi
# Run the WireGuard
if wg-quick up  "${interface}"; then 
    echo "Success in active vpn"
else 
   wg-quick down "${interface}"
   wg-quick up  "${interface}"
fi 

bashio::log.info "[unisec]: Provisioning node and service"
token=$(bashio::config "token")
api=$(bashio::config "api")
responseInfoToken=$(curl --silent -H "X-Consul-Token: ${token}" ${api}/v1/acl/token/self)
address=$(echo ${responseInfoToken} | jq -r '.Description' | jq -r '.address' | cut -d "/" -f1)
hostname=$(echo ${responseInfoToken} | jq -r '.AccessorID' | cut -c29-36)
address_lan=$(curl --silent  -H "authorization: Bearer ${SUPERVISOR_TOKEN}" http://supervisor/network/info | jq -r '.data.interfaces[0].ipv4.address[0]' | cut -d '/' -f1)

register_service () {
    local consul_api="$1"
    local token="$2"
    local hostname="$3"
    local id_service="$4"
    local ip_node="$5"
    local ip_service="$6"
    local service_tag="$7"
    local service_port="$8"
    local check_name="$9"
    
    curl --silent -X PUT \
    -H "X-Consul-Token: ${token}" \
    -d '{
      "Node": "'${hostname}'",
      "Address": "'${ip_node}'",
      "NodeMeta": {
        "external-node": "true",
        "external-probe": "true"
      },
      "Service": {
        "ID": "'${hostname}'-'${id_service}'",
        "Service": "'${id_service}'",
        "Tags": '${service_tag}',
        "Address":  "'${ip_service}'",
        "Port": '${service_port}'
      },
      "Check": {
       "Name":"'${check_name}'",
       "ServiceID":"'${id_service}'",
       "Status":"passing",
       "Definition":{
        "tcp":"'${ip_service}':'${service_port}'",
        "Interval":"30s",
        "Timeout":"10s",
        "success_before_passing": 0,
        "failures_before_critical": 3
       }
      }
    }'\
    ${consul_api}/v1/catalog/register
}

# Change hostname homeassistant
curl 'http://supervisor/host/options' \
  -H "authorization: Bearer ${SUPERVISOR_TOKEN}" \
  -d '{"hostname":"'${hostname}'"}' 


register_service ${api} ${token} "${hostname}" "lan" ${address} ${address_lan} '["'${hostname}'"]' 8123 "service:lan_${hostname}"
register_service ${api} ${token} "${hostname}" "wan" ${address} ${address} '["'${hostname}'"]' 8123 "service:wan_${hostname}"
register_service ${api} ${token} "${hostname}" "${hostname}" ${address} ${address} '["'${hostname}'"]' 8123 "service:${hostname}"

#exec curl -X PUT \
#-H "X-Consul-Token: ${token}" \
#-d '{
#  "Node": "'${hostname}'",
#  "Address": "'${address_lan}'",
#  "NodeMeta": {
#    "external-node": "true",
#    "external-probe": "true"
#  },
#  "Service": {
#    "ID": "'${hostname}'",
#    "Service": "'${hostname}'",
#    "Address":  "'${address}'",
#    "Port": 8123
#  },
#  "Check": {
#   "Name":"Monitoring SmartHome",
#   "ServiceID":"'${hostname}'",
#   "Status":"passing",
#   "Definition":{
#    "tcp":"'${address}':8123",
#    "Interval":"30s",
#    "Timeout":"10s",
#    "success_before_passing": 0,
#    "failures_before_critical": 3
#   }
#  }
#}' \
#${api}/v1/catalog/register 
